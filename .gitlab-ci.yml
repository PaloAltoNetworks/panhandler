include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

container_scanning:
  variables:
    GIT_STRATEGY: fetch
    DOCKER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH-test"

image: docker:latest
services:
  - docker:dind

stages:
  - build
  - test
  - docker_test
  - push

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  TEST_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH-test"
  GIT_SUBMODULE_STRATEGY: recursive

workflow:
  rules:
    - changes:
      - .gitlab-ci.yml
      - Dockerfile
      - cnc/*
      - src/*
      - requirements.txt

cache:
  paths:
    - .cache/pip
    - env/
    - .tox/


docker-build:
  stage: build
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull $TEST_IMAGE || true
    - docker build --pull --cache-from $TEST_IMAGE -t "$TEST_IMAGE" .
    - docker push $TEST_IMAGE

test:
  image: python:3.8-slim
  stage: test

  variables:
    CNC_TEST: 'TRUE'

  before_script:
    - python -V
    - python3 -m venv env
    - source env/bin/activate
    - apt update && apt-get install -y --no-install-recommends git
    - pip install --upgrade pip
    - pip install --upgrade -r requirements.txt
    - pip install tox flake8

  script:
    - tox -e py38, flake8-ph, flake8-cnc

docker_test:
  variables:
    GIT_STRATEGY: none

  image: $TEST_IMAGE
  stage: test
  before_script:
    - python3 -m venv env
    - source env/bin/activate
    - pip install tox
  script:
    - cd /app
    - ls -al
    - tox -e docker_env --workdir=$CI_PROJECT_DIR/.tox

push_dev:
  stage: push
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE "$CI_REGISTRY_IMAGE:dev"
    - docker push "$CI_REGISTRY_IMAGE:dev"

    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD" $DOCKERHUB_CI_REGISTRY
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE "$CI_REGISTRY_IMAGE:dev"
    - docker push "$CI_REGISTRY_IMAGE:dev"
  only:
    - develop

push_master:
  stage: push
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"

    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD" $DOCKERHUB_CI_REGISTRY
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - master
